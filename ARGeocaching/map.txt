//
//  ViewController.m
//  TestAR
//
//  Created by Edwin Groothuis on 10/3/18.
//  Copyright Â© 2018 Edwin Groothuis. All rights reserved.
//

#import "ViewController.h"

@interface ViewController () <ARSCNViewDelegate>

@property (nonatomic, strong) IBOutlet ARSCNView *sceneView;

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];

    NSArray *field = @[
        //          111111111122222222223333333333444444444455555555556
        //0123456789012345678901234567890123456789012345678901234567890
        @"                                                             ", // 35
        @" +---WWWW----WWWW----WWWW------------WWWW----WWWW----WWWW--+ ", // 34
        @" |p...........................x.x.........................p| ", // 33
        @" |............................x.x..........................| ", // 32
        @" |............................x.x..........................| ", // 31
        @" w............................x.x..........................w ", // 30
        @" w............................xxx..........................w ", // 29
        @" w.........................................................w ", // 28
        @" w.........................................................w ", // 27
        @" |................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...........| ", // 26
        @" |................x............................x...........| ", // 25
        @" |................xxxxxxxxxxxxxxxxxxxxxxx......x...........| ", // 24
        @" |......................................x......x...........| ", // 23
        @" w......................................x......x...........w ", // 22
        @" w......................................x......x...........w ", // 21
        @" w......................................x......x...........w ", // 20
        @" w......................................x......x...........w ", // 19
        @" |......................................x......x...........| ", // 18
        @" +xxxxxxxxxxxxxxxxxxxxxxxxxxx...........x......x...........| ", // 17
        @" |xxxxxxxxxxxxxxxxxxxxxxxxxxx...........x......x...........| ", // 16
        @" |......................................x......x...........| ", // 15
        @" w......................................x......x...........w ", // 14
        @" w......................................x......x...........w ", // 13
        @" w......................................x......x...........w ", // 12
        @" w......................................x......x...........w ", // 11
        @" |.........xxx..........................x......x...........| ", // 10
        @" |.........x.x..........................x......x...........| ", //  9
        @" |.........x.x..........................xxxxxxxx...........| ", //  8
        @" |.........x.x.............................................| ", //  7
        @" w.........x.x.............................................w ", //  6
        @" w.........x.x.............................................w ", //  5
        @" w.........x.x.............................................w ", //  4
        @" w.........x.x.............................................w ", //  3
        @" |.........x.x............................................p| ", //  2
        @" +-p.....p-+-+-------WWWW----WWWW----WWWW----WWWW----WWWW--+ ", //  1
        @"                                                             ", //  0
        ];

    // Container to hold all of the 3D geometry
    SCNScene *scene = [SCNScene new];

    float boxLength = 0.5;          // half a meter
    float boxWidth = boxLength;
    float boxHeight = 3.0;          // 2 meters
    float floorHeight = 0.1;        // 10 centimeters

    // Materials
    SCNMaterial *bricksWhite12Material = [SCNMaterial material];
    bricksWhite12Material.diffuse.contents = [UIImage imageNamed:@"Bricks - White - 12"];

    SCNMaterial *bricksWhite4Material = [SCNMaterial material];
    bricksWhite4Material.diffuse.contents = [UIImage imageNamed:@"Bricks - White - 4"];

    SCNMaterial *stoneMarbleMaterial = [SCNMaterial material];
    stoneMarbleMaterial.diffuse.contents = [UIImage imageNamed:@"Pillar - Stone"];

    SCNMaterial *graniteMaterial = [SCNMaterial material];
    graniteMaterial.diffuse.contents = [UIImage imageNamed:@"Floor"];

    SCNMaterial *glassMaterial = [SCNMaterial material];
    glassMaterial.diffuse.contents = [UIImage imageNamed:@"Window - Transparent"];
    glassMaterial.transparency = 0.1;

    SCNMaterial *semiTransparentMaterial = [SCNMaterial material];
    semiTransparentMaterial.diffuse.contents = [UIImage imageNamed:@"Roof - Transparent"];
    semiTransparentMaterial.transparency = 0.1;

    SCNMaterial *wallpaperMaterial = [SCNMaterial material];
    wallpaperMaterial.diffuse.contents = [UIImage imageNamed:@"Wallpaper"];

    // The 3D cube geometry we want to draw
    SCNBox *floorTileObject = [SCNBox boxWithWidth:boxWidth height:floorHeight length:boxLength chamferRadius:0.0];
    floorTileObject.materials = @[graniteMaterial];
    SCNBox *roofTileObject = [SCNBox boxWithWidth:boxWidth height:floorHeight length:boxLength chamferRadius:0.0];
    roofTileObject.materials = @[semiTransparentMaterial];

    SCNBox *brickWallObject = [SCNBox boxWithWidth:boxWidth height:boxHeight length:boxLength chamferRadius:0];
    brickWallObject.materials = @[bricksWhite12Material];

    SCNBox *wallWindowObject = [SCNBox boxWithWidth:boxWidth height:boxHeight / 3 length:boxLength chamferRadius:0];
    wallWindowObject.materials = @[bricksWhite4Material];

    SCNBox *wallWindowGlassBTObject = [SCNBox boxWithWidth:boxWidth / 6 height:boxHeight / 3 length:boxLength chamferRadius:0];
    wallWindowGlassBTObject.materials = @[glassMaterial];
    SCNBox *wallWindowGlassLRObject = [SCNBox boxWithWidth:boxWidth height:boxHeight / 3 length:boxLength / 6 chamferRadius:0];
    wallWindowGlassLRObject.materials = @[glassMaterial];

    SCNBox *insideWallObject = [SCNBox boxWithWidth:boxWidth height:boxHeight length:boxLength chamferRadius:0];
    insideWallObject.materials = @[wallpaperMaterial];

    SCNTube *pillarObject = [SCNTube tubeWithInnerRadius:boxLength / 2 outerRadius:3 * boxLength / 4 height:boxHeight];
    pillarObject.materials = @[stoneMarbleMaterial];

    for (float y = 0; y < [field count]; y++) {
        for (float x = 0; x < [[field objectAtIndex:y] length]; x++) {
            NSString *line = [field objectAtIndex:[field count] - y - 1];
            unichar c = [line characterAtIndex:x];

#define ORIGINX 6
#define ORIGINY -6
//#define ORIGINY 30

#define Y       (- y * boxLength + ORIGINY * boxLength)
#define X       (x * boxWidth - ORIGINX * boxWidth)
#define Z(z)    ((z))

#define FLOOR { \
    SCNNode *boxNode = [SCNNode nodeWithGeometry:floorTileObject]; \
    boxNode.position = SCNVector3Make(X, Z(-boxHeight / 2 - floorHeight), Y); \
    [scene.rootNode addChildNode:boxNode]; \
}

#define ROOF { \
    SCNNode *boxNode = [SCNNode nodeWithGeometry:roofTileObject]; \
    boxNode.position = SCNVector3Make(X, Z(boxHeight / 2), Y); \
    [scene.rootNode addChildNode:boxNode]; \
}

            switch (c) {
                case ' ':
                    FLOOR
                    break;

                case '.':
                    FLOOR ROOF
                    break;

                case '+':
                case '-':
                case '|': {
                    FLOOR ROOF
                    SCNNode *node = [SCNNode nodeWithGeometry:brickWallObject];
                    node.position = SCNVector3Make(X, Z(0), Y);
                    [scene.rootNode addChildNode:node];
                    break;
                }

                case 'w': {
                    ROOF FLOOR
                    SCNNode *node = [SCNNode nodeWithGeometry:wallWindowObject];
                    node.position = SCNVector3Make(X, Z(wallWindowObject.height), Y);
                    [scene.rootNode addChildNode:node];

                    node = [SCNNode nodeWithGeometry:wallWindowGlassBTObject];
                    node.position = SCNVector3Make(X, Z(0), Y);
                    [scene.rootNode addChildNode:node];

                    node = [SCNNode nodeWithGeometry:wallWindowObject];
                    node.position = SCNVector3Make(X, Z(-wallWindowObject.height), Y);
                    [scene.rootNode addChildNode:node];
                    break;
                }

                case 'W': {
                    ROOF FLOOR
                    SCNNode *node = [SCNNode nodeWithGeometry:wallWindowObject];
                    node.position = SCNVector3Make(X, Z(wallWindowObject.height), Y);
                    [scene.rootNode addChildNode:node];

                    node = [SCNNode nodeWithGeometry:wallWindowGlassLRObject];
                    node.position = SCNVector3Make(X, Z(0), Y);
                    [scene.rootNode addChildNode:node];

                    node = [SCNNode nodeWithGeometry:wallWindowObject];
                    node.position = SCNVector3Make(X, Z(-wallWindowObject.height), Y);
                    [scene.rootNode addChildNode:node];
                    break;
                }

                case 'p': {
                    FLOOR ROOF
                    SCNNode *node = [SCNNode nodeWithGeometry:pillarObject];
                    node.position = SCNVector3Make(X, Z(0), Y);
                    [scene.rootNode addChildNode:node];
                    break;
                }

                case 'x': {
                    FLOOR ROOF
                    SCNNode *node = [SCNNode nodeWithGeometry:insideWallObject];
                    node.position = SCNVector3Make(X, Z(0), Y);
                    [scene.rootNode addChildNode:node];
                    break;
                }

                default:
                    NSLog(@"Not found: '%c'", c);
                    break;
            }
        }
    }

    self.sceneView.autoenablesDefaultLighting = NO;
    self.sceneView.delegate = self;
    self.sceneView.showsStatistics = YES;

    // Set the scene to the view
    self.sceneView.scene = scene;
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    
    ARWorldTrackingConfiguration *configuration = [ARWorldTrackingConfiguration new];
    configuration.lightEstimationEnabled = YES;

    [self.sceneView.session runWithConfiguration:configuration];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    
    [self.sceneView.session pause];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - ARSCNViewDelegate

/*
// Override to create and configure nodes for anchors added to the view's session.
- (SCNNode *)renderer:(id<SCNSceneRenderer>)renderer nodeForAnchor:(ARAnchor *)anchor
{
    SCNNode *node = [SCNNode new];
 
    // Add geometry to the node...
 
    return node;
}
*/

- (void)session:(ARSession *)session didFailWithError:(NSError *)error
{
    // Present an error message to the user
}

- (void)sessionWasInterrupted:(ARSession *)session
{
    // Inform the user that the session has been interrupted, for example, by presenting an overlay
}

- (void)sessionInterruptionEnded:(ARSession *)session
{
    // Reset tracking and/or remove existing anchors if consistent tracking is required
}

@end
